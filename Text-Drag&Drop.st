'From Pharo6.0 of 13 May 2016 [Latest update: #60498] on 3 June 2017 at 1:19:30.846852 pm'!!TextMorph methodsFor: '*Text-Drag&Drop' stamp: 'LB 3/9/2015 20:46'!wantsDroppedMorph: aMorph event: anEvent	aMorph dragTransferType == #dragSelectionPlus ifFalse:[^false].	editor selection ifNotNil: [^true].	^false! !'From Pharo6.0 of 13 May 2016 [Latest update: #60498] on 3 June 2017 at 1:19:30.846852 pm'!!TextMorph methodsFor: '*Text-Drag&Drop' stamp: 'LB 3/9/2015 20:46'!acceptDroppingMorph: aMorph event: evt	"This message is sent when a morph is dropped onto me."		self editor dropSelection: evt.  "third step  LB added"	self addMorphFront: aMorph fromWorldPosition: aMorph position.		"Make a TextAnchor and install it in a run."! !'From Pharo6.0 of 13 May 2016 [Latest update: #60498] on 3 June 2017 at 1:19:30.847852 pm'!!TextEditor methodsFor: '*Text-Drag&Drop' stamp: 'LB 9/19/2014 23:10'!dropSelection: event	"Let me process drop for D&D"	"First to judge the drop postion,then cut old , past and selection"	(self paragraph selectionContainsPoint: event cursorPoint)			ifTrue: [^self ]. 	Sensor controlKeyPressed 		ifFalse: [  self dropWithoutSelection: event]		ifTrue: [ self dropWithSelection: event ] ! !'From Pharo6.0 of 13 May 2016 [Latest update: #60498] on 3 June 2017 at 1:19:30.847852 pm'!!TextEditor methodsFor: '*Text-Drag&Drop' stamp: 'LB 7/11/2014 23:44'!mouseDownOnSelectedText: event	"Create dragSelection  action for the event  LB added"	event hand		waitForClicksOrDrag: self 			event: event			selectors: {#mouseDownOnUnselectedText:. nil. nil. #dragSelection:}			threshold: 5."	| selectors |		selectors := Array		with: #mouseDownOnUnselectedText:		with: nil		with: nil		with:			(self morph dragEnabled				ifTrue: [ #startDrag: ]				ifFalse: [ nil ]).	event hand		waitForClicksOrDrag: self		event: event		selectors: selectors		threshold: 10.		"! !'From Pharo6.0 of 13 May 2016 [Latest update: #60498] on 3 June 2017 at 1:19:30.848852 pm'!!TextEditor methodsFor: '*Text-Drag&Drop' stamp: 'LB 2/28/2015 01:31'!dropWithoutSelection: event	"Let me process drop for D&D ctrl key not pressed"	"First to judge the drop postion,then cut old , past and selection"	| currentStartB newPosition selectedText start stop |	currentStartB :=self  paragraph characterBlockAtPoint: event cursorPoint. 	newPosition  := currentStartB stringIndex.	start := self startIndex.	stop := self stopIndex.	selectedText := self selection.	self editingState undoManager openRecordGroup.	self userHasEdited.	currentStartB  < self  startBlock		ifTrue: [ 			self paragraph replaceFrom: start to: stop-1 with: self nullText.			self editingState				redoArray: {morph. #redoTypeIn:interval:. {self nullText. (1 to: -1)}} 				undoArray: {morph. #undoTypeIn:interval:. {self nullText. (newPosition +  selectedText size to: newPosition - 1)}}.			self paragraph replaceFrom: newPosition to: (newPosition -1) with:  selectedText.			self editingState				redoArray: {morph. #redoTypeIn:interval:. {self nullText. (1 to: 1) }} 				undoArray: {morph. #undoTypeIn:interval:. {selectedText.  (start +  selectedText size  to: start +  selectedText size -1 )}}.			self selectFrom: newPosition to: newPosition + selectedText size -1.			].   	(currentStartB > self stopBlock)		ifTrue: [ 			self paragraph replaceFrom: newPosition to: (newPosition -1) with:  selectedText.			self editingState				redoArray: {morph. #redoTypeIn:interval:. {self nullText. (1 to: 1) }} 				undoArray: {morph. #undoTypeIn:interval:. {self nullText.  (newPosition  to: newPosition +  selectedText size -1 )}}.			self paragraph replaceFrom: start to: stop -1 with: self nullText.			self editingState				redoArray: {morph. #redoTypeIn:interval:. {self nullText. (1 to: -1)}} 				undoArray: {morph. #undoTypeIn:interval:. {selectedText. (start to: start- 1)}}.			self selectFrom: (newPosition - selectedText size)  to: newPosition -1.				].	self editingState undoManager closeRecordGroup.	self flash ! !'From Pharo6.0 of 13 May 2016 [Latest update: #60498] on 3 June 2017 at 1:19:30.848852 pm'!!TextEditor methodsFor: '*Text-Drag&Drop' stamp: 'LB 9/20/2014 01:02'!dropWithSelection: event	"Let me process drop for D&D ctrl key pressed"	"First to judge the drop postion,then cut old , past and selection"	| currentStartB newPosition selectedText   |	currentStartB :=self  paragraph characterBlockAtPoint: event cursorPoint. 	newPosition  := currentStartB stringIndex.	selectedText := self selection.	self userHasEdited. 	self editingState undoManager openRecordGroup.	self paragraph replaceFrom: newPosition to: (newPosition -1) with:  selectedText.	self editingState		redoArray: {morph. #redoTypeIn:interval:. {self nullText. (1 to: -1) }} 		undoArray: {morph. #undoTypeIn:interval:. {self nullText. (newPosition to: newPosition + selectedText size -1 )}}.	self editingState undoManager closeRecordGroup.	self markIndex: newPosition; pointIndex: newPosition + selectedText size.	self editingState previousInterval: self selectionInterval selection: self selection.		self selectFrom: newPosition to: newPosition + selectedText size -1.	self flash! !'From Pharo6.0 of 13 May 2016 [Latest update: #60498] on 3 June 2017 at 1:19:30.849852 pm'!!TextEditor methodsFor: '*Text-Drag&Drop' stamp: 'LB 7/13/2014 11:57'!dragSelection: evt	"Second step for drag&drop LB, open dragMorph"		|  draggedMorph ddm dragString dragSelection|		(dragString := dragSelection := self selection)				ifNil: [^ self].		dragSelection size > 8  			ifTrue:["aviod too long text draged. now draged in my pane, shoule be added in handMorph if another text pane"				dragString := (dragSelection copyFrom: 1 to: 8),'....more.'				].		draggedMorph := StringMorph contents: dragString.		draggedMorph color: Color white.		ddm := TransferMorph withPassenger: draggedMorph from: self morph.		ddm dragTransferType: #dragSelectionPlus.			[ 		ddm position: evt hand position.		evt hand 	grabMorph: ddm.		]		ensure: [Cursor normal show.			evt hand releaseMouseFocus: self]! !